alter table TRAIN_HISTORY add repeat_customer number(1);

update TRAIN_HISTORY set repeat_customer = 1 where repeater = 't';
update TRAIN_HISTORY set repeat_customer = 0 where repeater = 'f' ;

ALTER TABLE TRAIN_HISTORY drop column repeater; 

DELETE FROM transactions
      WHERE    PURCHASE_AMT = 0
            OR PURCHASE_AMT IS NULL
            OR PURCHASE_QTY = 0
            OR PURCHASE_QTY IS NULL
            OR CATEGORY_ID IS NULL
            OR COMPANY_ID IS NULL
            OR BRAND_ID IS NULL;
			
CREATE TABLE TRAIN_HIST
AS
   SELECT TRAIN_HISTORY_ID,
          TH.OFFER_ID,
          TH.CHAIN_ID,
          TH.MARKET_ID,
          TH.REPEAT_TRIPS,
          TH.REPEATER,
          TH.OFFER_DATE,
          OFF.CATEGORY_ID,
          OFF.MIN_QTY_TO_PURCHASE,
          OFF.COMPANY_ID,
          OFF.OFFER_VALUE,
          OFF.BRAND_ID
     FROM TRAIN_HISTORY TH, OFFERS OFF
    WHERE TH.OFFER_ID = OFF.OFFER_ID;
	
DROP TABLE TRAIN_HISTORY;

ALTER TABLE TRAIN_HIST
   RENAME TO
   TRAIN_HISTORY;
   
CREATE TABLE TEST_HIST
AS
   SELECT CUSTOMER_ID,
          TH.OFFER_ID,
          TH.CHAIN_ID,
          TH.MARKET_ID,
          TH.OFFER_DATE,
          OFF.CATEGORY_ID,
          OFF.MIN_QTY_TO_PURCHASE,
          OFF.COMPANY_ID,
          OFF.OFFER_VALUE,
          OFF.BRAND_ID
     FROM TEST_HISTORY TH, OFFERS OFF
    WHERE TH.OFFER_ID = OFF.OFFER_ID;

DROP TABLE TEST_HISTORY;
	
ALTER TABLE TEST_HIST
   RENAME TO
   TEST_HISTORY;
      
---------------------------------------------------------------

ALTER TABLE TRAIN_HISTORY
  ADD PURCHASE_TIMES_COMPANY NUMBER(10) DEFAULT 0;

CREATE TABLE TR_PURCHASE_TIMES_COMPANY
AS
     SELECT TH.TRAIN_HISTORY_ID CUSTOMER_ID,
            OFF.COMPANY_ID COMPANY_ID,
            COUNT (1) PURCHASE_TIMES
       FROM TRAIN_HISTORY TH, OFFERS OFF, TRANSACTIONS TR
      WHERE     TH.TRAIN_HISTORY_ID = TR.TRANSACTION_ID
            AND TH.OFFER_ID = OFF.OFFER_ID
            AND OFF.COMPANY_ID = TR.COMPANY_ID
   GROUP BY TH.TRAIN_HISTORY_ID, OFF.COMPANY_ID;

MERGE INTO TRAIN_HISTORY TH
     USING (SELECT CUSTOMER_ID, COMPANY_ID, PURCHASE_TIMES
              FROM TR_PURCHASE_TIMES_COMPANY) PTC
        ON (TH.TRAIN_HISTORY_ID = PTC.CUSTOMER_ID)
WHEN MATCHED
THEN
   UPDATE SET TH.PURCHASE_TIMES_COMPANY = PTC.PURCHASE_TIMES;

DROP TABLE TR_PURCHASE_TIMES_COMPANY;

ALTER TABLE TEST_HISTORY
  ADD PURCHASE_TIMES_COMPANY NUMBER(10) DEFAULT 0;
  
CREATE TABLE TE_PURCHASE_TIMES_COMPANY
AS
     SELECT TH.CUSTOMER_ID CUSTOMER_ID,
            OFF.COMPANY_ID COMPANY_ID,
            COUNT (1) PURCHASE_TIMES
       FROM TEST_HISTORY TH, OFFERS OFF, TRANSACTIONS TR
      WHERE     TH.CUSTOMER_ID = TR.TRANSACTION_ID
            AND TH.OFFER_ID = OFF.OFFER_ID
            AND OFF.COMPANY_ID = TR.COMPANY_ID
   GROUP BY TH.CUSTOMER_ID, OFF.COMPANY_ID;

MERGE INTO TEST_HISTORY TH
     USING (SELECT CUSTOMER_ID, COMPANY_ID, PURCHASE_TIMES
              FROM TE_PURCHASE_TIMES_COMPANY) PTC
        ON (TH.CUSTOMER_ID = PTC.CUSTOMER_ID)
WHEN MATCHED
THEN
   UPDATE SET TH.PURCHASE_TIMES_COMPANY = PTC.PURCHASE_TIMES;

DROP TABLE TE_PURCHASE_TIMES_COMPANY;
---------------------------------------------------------

ALTER TABLE TRAIN_HISTORY
   ADD PURCHASE_VALUE_COMPANY NUMBER (10) DEFAULT 0;

CREATE TABLE PURCHASE_VALUE_COMPANY
AS
     SELECT TH.TRAIN_HISTORY_ID CUSTOMER_ID,
            OFF.COMPANY_ID COMPANY_ID,
            SUM (PURCHASE_AMT) PURCHASE_AMT
       FROM TRAIN_HISTORY TH, OFFERS OFF, TRANSACTIONS TR
      WHERE     TH.TRAIN_HISTORY_ID = TR.TRANSACTION_ID
            AND TH.OFFER_ID = OFF.OFFER_ID
            AND OFF.COMPANY_ID = TR.COMPANY_ID
   GROUP BY TH.TRAIN_HISTORY_ID, OFF.COMPANY_ID;

MERGE INTO TRAIN_HISTORY TH
     USING (SELECT CUSTOMER_ID, COMPANY_ID, PURCHASE_AMT
              FROM PURCHASE_VALUE_COMPANY) PTC
        ON (TH.TRAIN_HISTORY_ID = PTC.CUSTOMER_ID)
WHEN MATCHED
THEN
   UPDATE SET TH.PURCHASE_VALUE_COMPANY = PTC.PURCHASE_AMT;

DROP TABLE PURCHASE_VALUE_COMPANY;

ALTER TABLE TEST_HISTORY
   ADD PURCHASE_VALUE_COMPANY NUMBER (10) DEFAULT 0;

CREATE TABLE PURCHASE_VALUE_COMPANY
AS
     SELECT TH.CUSTOMER_ID CUSTOMER_ID,
            OFF.COMPANY_ID COMPANY_ID,
            SUM (PURCHASE_AMT) PURCHASE_AMT
       FROM TEST_HISTORY TH, OFFERS OFF, TRANSACTIONS TR
      WHERE     TH.CUSTOMER_ID = TR.TRANSACTION_ID
            AND TH.OFFER_ID = OFF.OFFER_ID
            AND OFF.COMPANY_ID = TR.COMPANY_ID
   GROUP BY TH.CUSTOMER_ID, OFF.COMPANY_ID;

MERGE INTO TEST_HISTORY TH
     USING (SELECT CUSTOMER_ID, COMPANY_ID, PURCHASE_AMT
              FROM PURCHASE_VALUE_COMPANY) PTC
        ON (TH.CUSTOMER_ID = PTC.CUSTOMER_ID)
WHEN MATCHED
THEN
   UPDATE SET TH.PURCHASE_VALUE_COMPANY = PTC.PURCHASE_AMT;

DROP TABLE PURCHASE_VALUE_COMPANY;

---------------------------------------------------

ALTER TABLE TRAIN_HISTORY
   ADD PURCHASE_QUANTITY_COMPANY NUMBER (10) DEFAULT 0;
   
CREATE TABLE PURCHASE_QTY_COMPANY
AS
     SELECT TH.TRAIN_HISTORY_ID CUSTOMER_ID,
            OFF.COMPANY_ID COMPANY_ID,
            SUM (PURCHASE_QTY) PURCHASE_QTY
       FROM TRAIN_HISTORY TH, OFFERS OFF, TRANSACTIONS TR
      WHERE     TH.TRAIN_HISTORY_ID = TR.TRANSACTION_ID
            AND TH.OFFER_ID = OFF.OFFER_ID
            AND OFF.COMPANY_ID = TR.COMPANY_ID
   GROUP BY TH.TRAIN_HISTORY_ID, OFF.COMPANY_ID;

MERGE INTO TRAIN_HISTORY TH
     USING (SELECT CUSTOMER_ID, COMPANY_ID, PURCHASE_QTY
              FROM PURCHASE_QTY_COMPANY) PTC
        ON (TH.TRAIN_HISTORY_ID = PTC.CUSTOMER_ID)
WHEN MATCHED
THEN
   UPDATE SET TH.PURCHASE_QUANTITY_COMPANY = PTC.PURCHASE_QTY;

DROP TABLE PURCHASE_QTY_COMPANY;

ALTER TABLE TEST_HISTORY
   ADD PURCHASE_QUANTITY_COMPANY NUMBER (10) DEFAULT 0;
   
CREATE TABLE PURCHASE_QTY_COMPANY
AS
     SELECT TH.CUSTOMER_ID CUSTOMER_ID,
            OFF.COMPANY_ID COMPANY_ID,
            SUM (PURCHASE_QTY) PURCHASE_QTY
       FROM TEST_HISTORY TH, OFFERS OFF, TRANSACTIONS TR
      WHERE     TH.CUSTOMER_ID = TR.TRANSACTION_ID
            AND TH.OFFER_ID = OFF.OFFER_ID
            AND OFF.COMPANY_ID = TR.COMPANY_ID
   GROUP BY TH.CUSTOMER_ID, OFF.COMPANY_ID;

MERGE INTO TEST_HISTORY TH
     USING (SELECT CUSTOMER_ID, COMPANY_ID, PURCHASE_QTY
              FROM PURCHASE_QTY_COMPANY) PTC
        ON (TH.CUSTOMER_ID = PTC.CUSTOMER_ID)
WHEN MATCHED
THEN
   UPDATE SET TH.PURCHASE_QUANTITY_COMPANY = PTC.PURCHASE_QTY;

DROP TABLE PURCHASE_QTY_COMPANY;
-------------------------------------------------------------

ALTER TABLE TRAIN_HISTORY
   ADD OFFER_COMPANY_180 NUMBER (10) DEFAULT 0;
   
CREATE TABLE OFFER_COMPANY_180
AS
     SELECT TH.CUSTOMER_ID CUSTOMER_ID,
         OFF.COMPANY_ID COMPANY_ID,
         COUNT (1) PURCHASE_TIMES
    FROM TRAIN_HISTORY TH, OFFERS OFF, TRANSACTIONS TR
   WHERE     TH.CUSTOMER_ID = TR.CUSTOMER_ID
         AND TH.OFFER_ID = OFF.OFFER_ID
         AND OFF.COMPANY_ID = TR.COMPANY_ID
         AND TO_DATE (TR.PURCHASE_DATE, 'dd/mm/yyyy') BETWEEN   TO_DATE (
                                                                   TH.OFFER_DATE,
                                                                   'dd/mm/yyyy')
                                                              - 180
                                                          AND TO_DATE (
                                                                 TH.OFFER_DATE,
                                                                 'dd/mm/yyyy')
GROUP BY TH.CUSTOMER_ID, OFF.COMPANY_ID;

MERGE INTO TRAIN_HISTORY TH
     USING (SELECT CUSTOMER_ID, COMPANY_ID, PURCHASE_TIMES
              FROM OFFER_COMPANY_180) PTC
        ON (TH.CUSTOMER_ID = PTC.CUSTOMER_ID)
WHEN MATCHED
THEN
   UPDATE SET TH.OFFER_COMPANY_180 = PTC.PURCHASE_TIMES;

DROP TABLE OFFER_COMPANY_180;

ALTER TABLE TEST_HISTORY
   ADD OFFER_COMPANY_180 NUMBER (10) DEFAULT 0;
   
CREATE TABLE OFFER_COMPANY_180
AS
     SELECT TH.CUSTOMER_ID CUSTOMER_ID,
         OFF.COMPANY_ID COMPANY_ID,
         COUNT (1) PURCHASE_TIMES
    FROM TEST_HISTORY TH, OFFERS OFF, TRANSACTIONS TR
   WHERE     TH.CUSTOMER_ID = TR.CUSTOMER_ID
         AND TH.OFFER_ID = OFF.OFFER_ID
         AND OFF.COMPANY_ID = TR.COMPANY_ID
         AND TO_DATE (TR.PURCHASE_DATE, 'dd/mm/yyyy') BETWEEN   TO_DATE (
                                                                   TH.OFFER_DATE,
                                                                   'dd/mm/yyyy')
                                                              - 180
                                                          AND TO_DATE (
                                                                 TH.OFFER_DATE,
                                                                 'dd/mm/yyyy')
GROUP BY TH.CUSTOMER_ID, OFF.COMPANY_ID;

MERGE INTO TEST_HISTORY TH
     USING (SELECT CUSTOMER_ID, COMPANY_ID, PURCHASE_TIMES
              FROM OFFER_COMPANY_180) PTC
        ON (TH.CUSTOMER_ID = PTC.CUSTOMER_ID)
WHEN MATCHED
THEN
   UPDATE SET TH.OFFER_COMPANY_180 = PTC.PURCHASE_TIMES;

DROP TABLE OFFER_COMPANY_180;

-------------------------------------------------------------
ALTER TABLE TRAIN_HISTORY
   ADD OFFER_COMPANY_60 NUMBER (10) DEFAULT 0;
   
CREATE TABLE OFFER_COMPANY_60
AS
     SELECT TH.CUSTOMER_ID CUSTOMER_ID,
         OFF.COMPANY_ID COMPANY_ID,
         COUNT (1) PURCHASE_TIMES
    FROM TRAIN_HISTORY TH, OFFERS OFF, TRANSACTIONS TR
   WHERE     TH.CUSTOMER_ID = TR.CUSTOMER_ID
         AND TH.OFFER_ID = OFF.OFFER_ID
         AND OFF.COMPANY_ID = TR.COMPANY_ID
         AND TO_DATE (TR.PURCHASE_DATE, 'dd/mm/yyyy') BETWEEN   TO_DATE (
                                                                   TH.OFFER_DATE,
                                                                   'dd/mm/yyyy')
                                                              - 60
                                                          AND TO_DATE (
                                                                 TH.OFFER_DATE,
                                                                 'dd/mm/yyyy')
GROUP BY TH.CUSTOMER_ID, OFF.COMPANY_ID;

MERGE INTO TRAIN_HISTORY TH
     USING (SELECT CUSTOMER_ID, COMPANY_ID, PURCHASE_TIMES
              FROM OFFER_COMPANY_60) PTC
        ON (TH.CUSTOMER_ID = PTC.CUSTOMER_ID)
WHEN MATCHED
THEN
   UPDATE SET TH.OFFER_COMPANY_60 = PTC.PURCHASE_TIMES;

DROP TABLE OFFER_COMPANY_60;

ALTER TABLE TEST_HISTORY
   ADD OFFER_COMPANY_60 NUMBER (10) DEFAULT 0;
   
CREATE TABLE OFFER_COMPANY_60
AS
     SELECT TH.CUSTOMER_ID CUSTOMER_ID,
         OFF.COMPANY_ID COMPANY_ID,
         COUNT (1) PURCHASE_TIMES
    FROM TEST_HISTORY TH, OFFERS OFF, TRANSACTIONS TR
   WHERE     TH.CUSTOMER_ID = TR.CUSTOMER_ID
         AND TH.OFFER_ID = OFF.OFFER_ID
         AND OFF.COMPANY_ID = TR.COMPANY_ID
         AND TO_DATE (TR.PURCHASE_DATE, 'dd/mm/yyyy') BETWEEN   TO_DATE (
                                                                   TH.OFFER_DATE,
                                                                   'dd/mm/yyyy')
                                                              - 60
                                                          AND TO_DATE (
                                                                 TH.OFFER_DATE,
                                                                 'dd/mm/yyyy')
GROUP BY TH.CUSTOMER_ID, OFF.COMPANY_ID;

MERGE INTO TEST_HISTORY TH
     USING (SELECT CUSTOMER_ID, COMPANY_ID, PURCHASE_TIMES
              FROM OFFER_COMPANY_60) PTC
        ON (TH.CUSTOMER_ID = PTC.CUSTOMER_ID)
WHEN MATCHED
THEN
   UPDATE SET TH.OFFER_COMPANY_60 = PTC.PURCHASE_TIMES;

DROP TABLE OFFER_COMPANY_60;
-----------------------------------------------------------------

ALTER TABLE TRAIN_HISTORY
   ADD OFFER_COMPANY_30 NUMBER (10) DEFAULT 0;
   
CREATE TABLE OFFER_COMPANY_30
AS
     SELECT TH.CUSTOMER_ID CUSTOMER_ID,
         OFF.COMPANY_ID COMPANY_ID,
         COUNT (1) PURCHASE_TIMES
    FROM TRAIN_HISTORY TH, OFFERS OFF, TRANSACTIONS TR
   WHERE     TH.CUSTOMER_ID = TR.CUSTOMER_ID
         AND TH.OFFER_ID = OFF.OFFER_ID
         AND OFF.COMPANY_ID = TR.COMPANY_ID
         AND TO_DATE (TR.PURCHASE_DATE, 'dd/mm/yyyy') BETWEEN   TO_DATE (
                                                                   TH.OFFER_DATE,
                                                                   'dd/mm/yyyy')
                                                              - 30
                                                          AND TO_DATE (
                                                                 TH.OFFER_DATE,
                                                                 'dd/mm/yyyy')
GROUP BY TH.CUSTOMER_ID, OFF.COMPANY_ID;

MERGE INTO TRAIN_HISTORY TH
     USING (SELECT CUSTOMER_ID, COMPANY_ID, PURCHASE_TIMES
              FROM OFFER_COMPANY_30) PTC
        ON (TH.CUSTOMER_ID = PTC.CUSTOMER_ID)
WHEN MATCHED
THEN
   UPDATE SET TH.OFFER_COMPANY_30 = PTC.PURCHASE_TIMES;

DROP TABLE OFFER_COMPANY_30;

ALTER TABLE TEST_HISTORY
   ADD OFFER_COMPANY_30 NUMBER (10) DEFAULT 0;
   
CREATE TABLE OFFER_COMPANY_30
AS
     SELECT TH.CUSTOMER_ID CUSTOMER_ID,
         OFF.COMPANY_ID COMPANY_ID,
         COUNT (1) PURCHASE_TIMES
    FROM TEST_HISTORY TH, OFFERS OFF, TRANSACTIONS TR
   WHERE     TH.CUSTOMER_ID = TR.CUSTOMER_ID
         AND TH.OFFER_ID = OFF.OFFER_ID
         AND OFF.COMPANY_ID = TR.COMPANY_ID
         AND TO_DATE (TR.PURCHASE_DATE, 'dd/mm/yyyy') BETWEEN   TO_DATE (
                                                                   TH.OFFER_DATE,
                                                                   'dd/mm/yyyy')
                                                              - 30
                                                          AND TO_DATE (
                                                                 TH.OFFER_DATE,
                                                                 'dd/mm/yyyy')
GROUP BY TH.CUSTOMER_ID, OFF.COMPANY_ID;

MERGE INTO TEST_HISTORY TH
     USING (SELECT CUSTOMER_ID, COMPANY_ID, PURCHASE_TIMES
              FROM OFFER_COMPANY_30) PTC
        ON (TH.CUSTOMER_ID = PTC.CUSTOMER_ID)
WHEN MATCHED
THEN
   UPDATE SET TH.OFFER_COMPANY_30 = PTC.PURCHASE_TIMES;

DROP TABLE OFFER_COMPANY_30;

-----------------------------------------------------------------

ALTER TABLE TRAIN_HISTORY
   ADD PURCHASE_TIMES_CCB NUMBER (10) DEFAULT 0;
   
CREATE TABLE PURCHASE_TIMES_CCB
AS
     SELECT TH.CUSTOMER_ID CUSTOMER_ID,
         OFF.CATEGORY_ID CATEGORY_IDANY_ID,
         OFF.COMPANY_ID COMPANY_ID,
         OFF.BRAND_ID BRAND_ID,
         COUNT (1) PURCHASE_TIMES
    FROM TRAIN_HISTORY TH, OFFERS OFF, TRANSACTIONS TR
   WHERE     TH.CUSTOMER_ID = TR.CUSTOMER_ID
         AND TH.OFFER_ID = OFF.OFFER_ID
         AND OFF.CATEGORY_ID = TR.CATEGORY_ID
         AND OFF.COMPANY_ID = TR.COMPANY_ID
         AND OFF.BRAND_ID = TR.BRAND_ID
GROUP BY TH.CUSTOMER_ID,
         OFF.CATEGORY_ID,
         OFF.COMPANY_ID,
         OFF.BRAND_ID;

MERGE INTO TRAIN_HISTORY TH
     USING (SELECT CUSTOMER_ID, COMPANY_ID, PURCHASE_TIMES
              FROM PURCHASE_TIMES_CCB) PTC
        ON (TH.CUSTOMER_ID = PTC.CUSTOMER_ID)
WHEN MATCHED
THEN
   UPDATE SET TH.PURCHASE_TIMES_CCB = PTC.PURCHASE_TIMES;

DROP TABLE PURCHASE_TIMES_CCB;

ALTER TABLE TEST_HISTORY
   ADD PURCHASE_TIMES_CCB NUMBER (10) DEFAULT 0;
   
CREATE TABLE PURCHASE_TIMES_CCB
AS
     SELECT TH.CUSTOMER_ID CUSTOMER_ID,
         OFF.CATEGORY_ID CATEGORY_IDANY_ID,
         OFF.COMPANY_ID COMPANY_ID,
         OFF.BRAND_ID BRAND_ID,
         COUNT (1) PURCHASE_TIMES
    FROM TEST_HISTORY TH, OFFERS OFF, TRANSACTIONS TR
   WHERE     TH.CUSTOMER_ID = TR.CUSTOMER_ID
         AND TH.OFFER_ID = OFF.OFFER_ID
         AND OFF.CATEGORY_ID = TR.CATEGORY_ID
         AND OFF.COMPANY_ID = TR.COMPANY_ID
         AND OFF.BRAND_ID = TR.BRAND_ID
GROUP BY TH.CUSTOMER_ID,
         OFF.CATEGORY_ID,
         OFF.COMPANY_ID,
         OFF.BRAND_ID;

MERGE INTO TEST_HISTORY TH
     USING (SELECT CUSTOMER_ID, COMPANY_ID, PURCHASE_TIMES
              FROM PURCHASE_TIMES_CCB) PTC
        ON (TH.CUSTOMER_ID = PTC.CUSTOMER_ID)
WHEN MATCHED
THEN
   UPDATE SET TH.PURCHASE_TIMES_CCB = PTC.PURCHASE_TIMES;

DROP TABLE PURCHASE_TIMES_CCB;

-------------------------------------------------------------------------

ALTER TABLE TRAIN_HISTORY
   ADD NEVER_BOUGHT_CCB NUMBER (1) DEFAULT NULL; 
   
CREATE TABLE NEVER_BOUGHT_CCB
AS
     SELECT TH.CUSTOMER_ID CUSTOMER_ID,
         OFF.CATEGORY_ID CATEGORY_IDANY_ID,
         OFF.COMPANY_ID COMPANY_ID,
         OFF.BRAND_ID BRAND_ID,
         DECODE (COUNT (1), 0, 1, 0) NOT_PURCHASED_BEFORE
    FROM TRAIN_HISTORY TH, OFFERS OFF, TRANSACTIONS TR
   WHERE     TH.CUSTOMER_ID = TR.CUSTOMER_ID
         AND TH.OFFER_ID = OFF.OFFER_ID
         AND OFF.CATEGORY_ID = TR.CATEGORY_ID
         AND OFF.COMPANY_ID = TR.COMPANY_ID
         AND OFF.BRAND_ID = TR.BRAND_ID
         AND TR.CUSTOMER_ID = 101623425
GROUP BY TH.CUSTOMER_ID,
         OFF.CATEGORY_ID,
         OFF.COMPANY_ID,
         OFF.BRAND_ID;

MERGE INTO TRAIN_HISTORY TH
     USING (SELECT CUSTOMER_ID, COMPANY_ID, NOT_PURCHASED_BEFORE
              FROM NEVER_BOUGHT_CCB) PTC
        ON (TH.CUSTOMER_ID = PTC.CUSTOMER_ID)
WHEN MATCHED
THEN
   UPDATE SET TH.NEVER_BOUGHT_CCB = PTC.NOT_PURCHASED_BEFORE;

DROP TABLE NEVER_BOUGHT_CCB;

ALTER TABLE TEST_HISTORY
   ADD NEVER_BOUGHT_CCB NUMBER (1) DEFAULT NULL;    
   
CREATE TABLE NEVER_BOUGHT_CCB
AS
     SELECT TH.CUSTOMER_ID CUSTOMER_ID,
         OFF.CATEGORY_ID CATEGORY_IDANY_ID,
         OFF.COMPANY_ID COMPANY_ID,
         OFF.BRAND_ID BRAND_ID,
         DECODE (COUNT (1), 0, 1, 0) NOT_PURCHASED_BEFORE
    FROM TEST_HISTORY TH, OFFERS OFF, TRANSACTIONS TR
   WHERE     TH.CUSTOMER_ID = TR.CUSTOMER_ID
         AND TH.OFFER_ID = OFF.OFFER_ID
         AND OFF.CATEGORY_ID = TR.CATEGORY_ID
         AND OFF.COMPANY_ID = TR.COMPANY_ID
         AND OFF.BRAND_ID = TR.BRAND_ID
GROUP BY TH.CUSTOMER_ID,
         OFF.CATEGORY_ID,
         OFF.COMPANY_ID,
         OFF.BRAND_ID;

MERGE INTO TEST_HISTORY TH
     USING (SELECT CUSTOMER_ID, COMPANY_ID, NOT_PURCHASED_BEFORE
              FROM NEVER_BOUGHT_CCB) PTC
        ON (TH.CUSTOMER_ID = PTC.CUSTOMER_ID)
WHEN MATCHED
THEN
   UPDATE SET TH.NEVER_BOUGHT_CCB = PTC.NOT_PURCHASED_BEFORE;

DROP TABLE NEVER_BOUGHT_CCB;

---------------------------------------------------------

ALTER TABLE TRAIN_HISTORY
   ADD PURCHASE_TIMES_CAT NUMBER (10) DEFAULT 0;
   
CREATE TABLE PURCHASE_TIMES_CAT
AS
     SELECT TH.CUSTOMER_ID CUSTOMER_ID,
         OFF.CATEGORY_ID CATEGORY_ID,
         COUNT (*) PURCHASE_TIMES
FROM TRAIN_HISTORY TH, OFFERS OFF, TRANSACTIONS TR
WHERE     TH.CUSTOMER_ID = TR.CUSTOMER_ID
         AND TH.OFFER_ID = OFF.OFFER_ID
         AND OFF.CATEGORY_ID = TR.CATEGORY_ID
GROUP BY TH.CUSTOMER_ID, OFF.CATEGORY_ID;

MERGE INTO TRAIN_HISTORY TH
     USING (SELECT CUSTOMER_ID, CATEGORY_ID, PURCHASE_TIMES
              FROM PURCHASE_TIMES_CAT) PTC
        ON (TH.CUSTOMER_ID = PTC.CUSTOMER_ID)
WHEN MATCHED
THEN
   UPDATE SET TH.PURCHASE_TIMES_CAT = PTC.PURCHASE_TIMES;

DROP TABLE PURCHASE_TIMES_CAT;

ALTER TABLE TEST_HISTORY
   ADD PURCHASE_TIMES_CAT NUMBER (10) DEFAULT 0;
   
CREATE TABLE PURCHASE_TIMES_CAT
AS
     SELECT TH.CUSTOMER_ID CUSTOMER_ID,
         OFF.CATEGORY_ID CATEGORY_ID,
         COUNT (*) PURCHASE_TIMES
FROM TEST_HISTORY TH, OFFERS OFF, TRANSACTIONS TR
WHERE     TH.CUSTOMER_ID = TR.CUSTOMER_ID
         AND TH.OFFER_ID = OFF.OFFER_ID
         AND OFF.CATEGORY_ID = TR.CATEGORY_ID
GROUP BY TH.CUSTOMER_ID, OFF.CATEGORY_ID;

MERGE INTO TEST_HISTORY TH
     USING (SELECT CUSTOMER_ID, CATEGORY_ID, PURCHASE_TIMES
              FROM PURCHASE_TIMES_CAT) PTC
        ON (TH.CUSTOMER_ID = PTC.CUSTOMER_ID)
WHEN MATCHED
THEN
   UPDATE SET TH.PURCHASE_TIMES_CAT = PTC.PURCHASE_TIMES;

DROP TABLE PURCHASE_TIMES_CAT;

-----------------------------------------------------------------

ALTER TABLE TRAIN_HISTORY
   ADD NEVER_BOUGHT_CAT NUMBER (1); 
   
CREATE TABLE NEVER_BOUGHT_CAT
AS
     SELECT TH.CUSTOMER_ID CUSTOMER_ID,
         OFF.CATEGORY_ID CATEGORY_ID,
         DECODE (COUNT (1), 0, 1, 0) NOT_PURCHASED_BEFORE
   FROM TRAIN_HISTORY TH, OFFERS OFF, TRANSACTIONS TR
   WHERE     TH.CUSTOMER_ID = TR.CUSTOMER_ID
         AND TH.OFFER_ID = OFF.OFFER_ID
GROUP BY TH.CUSTOMER_ID, OFF.CATEGORY_ID;

MERGE INTO TRAIN_HISTORY TH
     USING (SELECT CUSTOMER_ID, CATEGORY_ID, NOT_PURCHASED_BEFORE
              FROM NEVER_BOUGHT_CAT) PTC
        ON (TH.CUSTOMER_ID = PTC.CUSTOMER_ID)
WHEN MATCHED
THEN
   UPDATE SET TH.NEVER_BOUGHT_CAT = PTC.NOT_PURCHASED_BEFORE;

DROP TABLE NEVER_BOUGHT_CAT;

ALTER TABLE TEST_HISTORY
   ADD NEVER_BOUGHT_CAT NUMBER (1); 
   
CREATE TABLE NEVER_BOUGHT_CAT
AS
     SELECT TH.CUSTOMER_ID CUSTOMER_ID,
         OFF.CATEGORY_ID CATEGORY_ID,
         DECODE (COUNT (1), 0, 1, 0) NOT_PURCHASED_BEFORE
   FROM TEST_HISTORY TH, OFFERS OFF, TRANSACTIONS TR
   WHERE     TH.CUSTOMER_ID = TR.CUSTOMER_ID
         AND TH.OFFER_ID = OFF.OFFER_ID
GROUP BY TH.CUSTOMER_ID, OFF.CATEGORY_ID;

MERGE INTO TEST_HISTORY TH
     USING (SELECT CUSTOMER_ID, CATEGORY_ID, NOT_PURCHASED_BEFORE
              FROM NEVER_BOUGHT_CAT) PTC
        ON (TH.CUSTOMER_ID = PTC.CUSTOMER_ID)
WHEN MATCHED
THEN
   UPDATE SET TH.NEVER_BOUGHT_CAT = PTC.NOT_PURCHASED_BEFORE;

DROP TABLE NEVER_BOUGHT_CAT;

----------------------------------------------------------------
ALTER TABLE TRAIN_HISTORY
   ADD AMOUNT_SPENT_CAT NUMBER (10) DEFAULT 0;
   
CREATE TABLE AMOUNT_SPENT_CAT
AS
    SELECT TH.CUSTOMER_ID CUSTOMER_ID, OFF.CATEGORY_ID CATEGORY_ID,
	SUM (PURCHASE_AMT) TOTAL_AMT_SPENT
   FROM TRAIN_HISTORY TH, OFFERS OFF, TRANSACTIONS TR
   WHERE TH.CUSTOMER_ID = TR.CUSTOMER_ID
         AND TH.OFFER_ID = OFF.OFFER_ID
	 AND OFF.CATEGORY_ID = TR.CATEGORY_ID
GROUP BY TH.CUSTOMER_ID, OFF.CATEGORY_ID;

MERGE INTO TRAIN_HISTORY TH
     USING (SELECT CUSTOMER_ID, CATEGORY_ID, TOTAL_AMT_SPENT
              FROM AMOUNT_SPENT_CAT) PTC
        ON (TH.CUSTOMER_ID = PTC.CUSTOMER_ID)
WHEN MATCHED
THEN
   UPDATE SET TH.AMOUNT_SPENT_CAT = PTC.TOTAL_AMT_SPENT;

DROP TABLE AMOUNT_SPENT_CAT;

ALTER TABLE TEST_HISTORY
   ADD AMOUNT_SPENT_CAT NUMBER (10) DEFAULT 0;
   
CREATE TABLE AMOUNT_SPENT_CAT
AS
    SELECT TH.CUSTOMER_ID CUSTOMER_ID, OFF.CATEGORY_ID CATEGORY_ID,
	SUM (PURCHASE_AMT) TOTAL_AMT_SPENT
   FROM TEST_HISTORY TH, OFFERS OFF, TRANSACTIONS TR
   WHERE TH.CUSTOMER_ID = TR.CUSTOMER_ID
         AND TH.OFFER_ID = OFF.OFFER_ID
	 AND OFF.CATEGORY_ID = TR.CATEGORY_ID
GROUP BY TH.CUSTOMER_ID, OFF.CATEGORY_ID;

MERGE INTO TEST_HISTORY TH
     USING (SELECT CUSTOMER_ID, CATEGORY_ID, TOTAL_AMT_SPENT
              FROM AMOUNT_SPENT_CAT) PTC
        ON (TH.CUSTOMER_ID = PTC.CUSTOMER_ID)
WHEN MATCHED
THEN
   UPDATE SET TH.AMOUNT_SPENT_CAT = PTC.TOTAL_AMT_SPENT;

DROP TABLE AMOUNT_SPENT_CAT;

------------------------------------------------------------

ALTER TABLE TRAIN_HISTORY
   ADD BOUGHT_CATEGORY_30 NUMBER (10) DEFAULT 0;
   
CREATE TABLE BOUGHT_CATEGORY_30
AS
     SELECT TH.CUSTOMER_ID CUSTOMER_ID,
         OFF.CATEGORY_ID CATEGORY_ID,
         COUNT (1) PURCHASE_TIMES
    FROM TRAIN_HISTORY TH, OFFERS OFF, TRANSACTIONS TR
    WHERE     TH.CUSTOMER_ID = TR.CUSTOMER_ID
         AND TH.OFFER_ID = OFF.OFFER_ID
         AND OFF.CATEGORY_ID = TR.CATEGORY_ID
         AND TO_DATE (TR.PURCHASE_DATE, 'dd/mm/yyyy') BETWEEN   TO_DATE (
                                                                   TH.OFFER_DATE,
                                                                   'dd/mm/yyyy')
                                                              - 30
                                                          AND TO_DATE (
                                                                 TH.OFFER_DATE,
                                                                 'dd/mm/yyyy')
GROUP BY TH.CUSTOMER_ID, OFF.CATEGORY_ID;

MERGE INTO TRAIN_HISTORY TH
     USING (SELECT CUSTOMER_ID, CATEGORY_ID, PURCHASE_TIMES
              FROM BOUGHT_CATEGORY_30) PTC
        ON (TH.CUSTOMER_ID = PTC.CUSTOMER_ID)
WHEN MATCHED
THEN
   UPDATE SET TH.BOUGHT_CATEGORY_30 = PTC.PURCHASE_TIMES;

DROP TABLE BOUGHT_CATEGORY_30;

ALTER TABLE TEST_HISTORY
   ADD BOUGHT_CATEGORY_30 NUMBER (10) DEFAULT 0;
   
CREATE TABLE BOUGHT_CATEGORY_30
AS
     SELECT TH.CUSTOMER_ID CUSTOMER_ID,
         OFF.CATEGORY_ID CATEGORY_ID,
         COUNT (1) PURCHASE_TIMES
    FROM TEST_HISTORY TH, OFFERS OFF, TRANSACTIONS TR
    WHERE     TH.CUSTOMER_ID = TR.CUSTOMER_ID
         AND TH.OFFER_ID = OFF.OFFER_ID
         AND OFF.CATEGORY_ID = TR.CATEGORY_ID
         AND TO_DATE (TR.PURCHASE_DATE, 'dd/mm/yyyy') BETWEEN   TO_DATE (
                                                                   TH.OFFER_DATE,
                                                                   'dd/mm/yyyy')
                                                              - 30
                                                          AND TO_DATE (
                                                                 TH.OFFER_DATE,
                                                                 'dd/mm/yyyy')
GROUP BY TH.CUSTOMER_ID, OFF.CATEGORY_ID;

MERGE INTO TEST_HISTORY TH
     USING (SELECT CUSTOMER_ID, CATEGORY_ID, PURCHASE_TIMES
              FROM BOUGHT_CATEGORY_30) PTC
        ON (TH.CUSTOMER_ID = PTC.CUSTOMER_ID)
WHEN MATCHED
THEN
   UPDATE SET TH.BOUGHT_CATEGORY_30 = PTC.PURCHASE_TIMES;

DROP TABLE BOUGHT_CATEGORY_30;

-----------------------------------------------------------------

ALTER TABLE TRAIN_HISTORY
   ADD CHAIN_VISIT_FREQ NUMBER (10) DEFAULT 0;
   
CREATE TABLE CHAIN_VISIT_FREQ
AS
    
  SELECT CUSTOMER_ID, CHAIN_ID, COUNT(PURCHASE_TIMES) PURCHASE_TIMES
    FROM (  SELECT TH.CUSTOMER_ID CUSTOMER_ID,
                   TH.CHAIN_ID CHAIN_ID,
                   TR.PURCHASE_DATE,
                   COUNT (*) PURCHASE_TIMES
              FROM TRAIN_HISTORY TH, OFFERS OFF, TRANSACTIONS TR
             WHERE     TH.CUSTOMER_ID = TR.CUSTOMER_ID
                   AND TH.OFFER_ID = OFF.OFFER_ID
                   AND TH.CHAIN_ID = TR.CHAIN_ID
          GROUP BY TH.CUSTOMER_ID, TH.CHAIN_ID, TR.PURCHASE_DATE)
GROUP BY CUSTOMER_ID, CHAIN_ID;

MERGE INTO TRAIN_HISTORY TH
     USING (SELECT CUSTOMER_ID, CHAIN_ID, PURCHASE_TIMES
              FROM CHAIN_VISIT_FREQ) PTC
        ON (TH.CUSTOMER_ID = PTC.CUSTOMER_ID)
WHEN MATCHED
THEN
   UPDATE SET TH.CHAIN_VISIT_FREQ = PTC.PURCHASE_TIMES;

DROP TABLE CHAIN_VISIT_FREQ;

ALTER TABLE TEST_HISTORY
   ADD CHAIN_VISIT_FREQ NUMBER (10) DEFAULT 0;
   
CREATE TABLE CHAIN_VISIT_FREQ
AS    
  SELECT CUSTOMER_ID, CHAIN_ID, COUNT(PURCHASE_TIMES) PURCHASE_TIMES
    FROM (  SELECT TH.CUSTOMER_ID CUSTOMER_ID,
                   TH.CHAIN_ID CHAIN_ID,
                   TR.PURCHASE_DATE,
                   COUNT (*) PURCHASE_TIMES
              FROM TEST_HISTORY TH, OFFERS OFF, TRANSACTIONS TR
             WHERE     TH.CUSTOMER_ID = TR.CUSTOMER_ID
                   AND TH.OFFER_ID = OFF.OFFER_ID
                   AND TH.CHAIN_ID = TR.CHAIN_ID
          GROUP BY TH.CUSTOMER_ID, TH.CHAIN_ID, TR.PURCHASE_DATE)
GROUP BY CUSTOMER_ID, CHAIN_ID;

MERGE INTO TEST_HISTORY TH
     USING (SELECT CUSTOMER_ID, CHAIN_ID, PURCHASE_TIMES
              FROM CHAIN_VISIT_FREQ) PTC
        ON (TH.CUSTOMER_ID = PTC.CUSTOMER_ID)
WHEN MATCHED
THEN
   UPDATE SET TH.CHAIN_VISIT_FREQ = PTC.PURCHASE_TIMES;

DROP TABLE CHAIN_VISIT_FREQ;

--------------------------------------------------------------

ALTER TABLE TRAIN_HISTORY
   ADD RATIO_RET_BGHT_CC NUMBER (10) DEFAULT 0;
   
CREATE TABLE RATIO_RET_BGHT_CC
AS
     SELECT CUSTOMER_ID,
         (CASE
             WHEN BOUGHT_COUNT > 0 THEN RETURN_COUNT / BOUGHT_COUNT
             ELSE 0
          END)
            RATIO
    FROM (  SELECT TR.CUSTOMER_ID CUSTOMER_ID,
                   COUNT (CASE WHEN TR.PURCHASE_AMT < 0 THEN 1 END) RETURN_COUNT,
                   COUNT (CASE WHEN TR.PURCHASE_AMT > 0 THEN 1 END) BOUGHT_COUNT
              FROM TRAIN_HISTORY TH, OFFERS OFF, TRANSACTIONS TR
             WHERE TH.CUSTOMER_ID = TR.CUSTOMER_ID
                   AND TH.OFFER_ID = OFF.OFFER_ID
                   AND OFF.CATEGORY_ID = TR.CATEGORY_ID
                   AND OFF.COMPANY_ID = TR.COMPANY_ID
          	   GROUP BY TR.CUSTOMER_ID 
         );

MERGE INTO TRAIN_HISTORY TH
     USING (SELECT CUSTOMER_ID, RATIO
              FROM RATIO_RET_BGHT_CC) PTC
        ON (TH.CUSTOMER_ID = PTC.CUSTOMER_ID)
WHEN MATCHED
THEN
   UPDATE SET TH.RATIO_RET_BGHT_CC = PTC.RATIO;

DROP TABLE RATIO_RET_BGHT_CC;

ALTER TABLE TEST_HISTORY
   ADD RATIO_RET_BGHT_CC NUMBER (10) DEFAULT 0;
   
CREATE TABLE RATIO_RET_BGHT_CC
AS
     SELECT CUSTOMER_ID,
         (CASE
             WHEN BOUGHT_COUNT > 0 THEN RETURN_COUNT / BOUGHT_COUNT
             ELSE 0
          END)
            RATIO
    FROM (  SELECT TR.CUSTOMER_ID CUSTOMER_ID,
                   COUNT (CASE WHEN TR.PURCHASE_AMT < 0 THEN 1 END) RETURN_COUNT,
                   COUNT (CASE WHEN TR.PURCHASE_AMT > 0 THEN 1 END) BOUGHT_COUNT
              FROM TEST_HISTORY TH, OFFERS OFF, TRANSACTIONS TR
             WHERE TH.CUSTOMER_ID = TR.CUSTOMER_ID
                   AND TH.OFFER_ID = OFF.OFFER_ID
                   AND OFF.CATEGORY_ID = TR.CATEGORY_ID
                   AND OFF.COMPANY_ID = TR.COMPANY_ID
          	   GROUP BY TR.CUSTOMER_ID 
         );

MERGE INTO TEST_HISTORY TH
     USING (SELECT CUSTOMER_ID, RATIO
              FROM RATIO_RET_BGHT_CC) PTC
        ON (TH.CUSTOMER_ID = PTC.CUSTOMER_ID)
WHEN MATCHED
THEN
   UPDATE SET TH.RATIO_RET_BGHT_CC = PTC.RATIO;

DROP TABLE RATIO_RET_BGHT_CC;